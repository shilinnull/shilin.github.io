<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>仕林的博客</title><link>https://shilinnull.github.io/shilin.github.io</link><description>Shilin Blog</description><copyright>仕林的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/108561949?v=4&amp;size=64</url><title>avatar</title><link>https://shilinnull.github.io/shilin.github.io</link></image><lastBuildDate>Sun, 30 Jun 2024 07:46:35 +0000</lastBuildDate><managingEditor>仕林的博客</managingEditor><ttl>60</ttl><webMaster>仕林的博客</webMaster><item><title>2. C++中隐含的this指针讲解</title><link>https://shilinnull.github.io/shilin.github.io/post/2.%20C%2B%2B-zhong-yin-han-de-this-zhi-zhen-jiang-jie.html</link><description>&#13;
## 一、this指针的引出&#13;
&#13;
&#13;
- 我们先来定义一个日期类`Date`，下面这段代码执行的结果是什么呢？&#13;
&#13;
&#13;
```cpp&#13;
class Date&#13;
{&#13;
public:&#13;
	void Init(int year, int month, int day)&#13;
	{&#13;
		_year = year;&#13;
		_month = month;&#13;
		_day = day;&#13;
	}&#13;
	void print()&#13;
	{&#13;
		cout &lt;&lt; _year &lt;&lt; '-' &lt;&lt; _month &lt;&lt; '-' &lt;&lt; _day &lt;&lt; endl;&#13;
		&#13;
	}&#13;
private:&#13;
	int _year; &#13;
	int _month; &#13;
	int _day; &#13;
};&#13;
int main()&#13;
{&#13;
	Date d1, d2;&#13;
	&#13;
	d1.Init(2022, 5, 11);&#13;
	d2.Init(2022, 5, 12);&#13;
&#13;
	d1.print();&#13;
	d2.print();&#13;
	return 0;&#13;
}&#13;
```&#13;
&#13;
- 可以看到分别打印出了**两个日期**，它是怎么知道改打印哪个的？&#13;
&#13;
![在这里插入图片描述](https://img-blog.csdnimg.cn/direct/6069c982dacd4e20840ca421e99ce0d1.png)&#13;
&#13;
&#13;
- 我们来分析一下，先看一下**汇编代码，看一看**&#13;
&#13;
&#13;
![在这里插入图片描述](https://img-blog.csdnimg.cn/direct/dba395b3dc58423b92fa5d0b44abdfcb.png)&#13;
&#13;
&#13;
----&#13;
&#13;
- 我们看到上面的代码是调用的**同一个函数**，那么编译器是如何知道那两个日期的？&#13;
&#13;
- 其实C++里有一个**隐含**的**this指针**，在[微软的官方文档](https://learn.microsoft.com/zh-cn/cpp/cpp/this-pointer?view=msvc-170)也有说明&#13;
&#13;
- 在使用函数的时候其实里面**传了一个地址，然后有一个隐的this指针来接收**&#13;
&#13;
---&#13;
&#13;
&gt;原形是这样：&#13;
&#13;
&#13;
![在这里插入图片描述](https://img-blog.csdnimg.cn/direct/fcc3f5a320bb4692a65474ddce4eba88.png)&#13;
&#13;
![在这里插入图片描述](https://img-blog.csdnimg.cn/direct/da0b81f7cab34af0898930cb25b289a0.png)&#13;
&#13;
&#13;
- 那为什么这里**报错**了呢？&#13;
- 因为不必要写，这个是**隐含**的~~，我们可以**直接在类里面使用**&#13;
&#13;
&#13;
&#13;
## 二、this指针的特性&#13;
&#13;
- 刚刚上面也给你看了原形，细心的烙铁已经发现了，这个this指针是有一个**const修饰**的，而且这个const是在`*`的右边&#13;
&#13;
![在这里插入图片描述](https://img-blog.csdnimg.cn/direct/d561f02819e2498f9f842af479520663.png)&#13;
&#13;
&#13;
- 这里的`const`修饰，在`const`的右边&#13;
&#13;
- 下面我们回忆一下~&#13;
&#13;
![在这里插入图片描述](https://img-blog.csdnimg.cn/direct/221ab0d8a51540be90c5c7d5ff12f0a7.png)&#13;
&#13;
- 到这里就得出的**this本身是不被修改的，但是做指向的值是可以被修改**&#13;
&#13;
- 我们可以在类中打印一下`this`指针的地址，再打印一下`d1`和`d2`的地址，我们来看一下：&#13;
&#13;
![在这里插入图片描述](https://img-blog.csdnimg.cn/direct/26696d96afce46419aeca6760ef18445.png)&#13;
&#13;
- 得到结果就是this指针指向一个指向**当前对象**的指针&#13;
&#13;
---&#13;
&#13;
- 我们还可以下面这样，是不会报错的，但是不能向上面直接在形参就写上&#13;
&#13;
![在这里插入图片描述](https://img-blog.csdnimg.cn/direct/f76630adebed4fdcbd84da92faaf531c.png)&#13;
&#13;
特点：&#13;
&#13;
**1、形参和实参的位置，我们不能显示写&#13;
2、函数内部可以使用**&#13;
&#13;
---&#13;
&#13;
- **最后总结一下：**&#13;
&#13;
1. this指针的类型：类型 **\*const**，即成员函数中，**不能给this指针赋值**。</description><guid isPermaLink="true">https://shilinnull.github.io/shilin.github.io/post/2.%20C%2B%2B-zhong-yin-han-de-this-zhi-zhen-jiang-jie.html</guid><pubDate>Sun, 30 Jun 2024 07:46:08 +0000</pubDate></item><item><title>1. C++的关键字，命名空间，缺省参数，函数重载以及原理</title><link>https://shilinnull.github.io/shilin.github.io/post/1.%20C%2B%2B-de-guan-jian-zi-%EF%BC%8C-ming-ming-kong-jian-%EF%BC%8C-que-sheng-can-shu-%EF%BC%8C-han-shu-zhong-zai-yi-ji-yuan-li.html</link><description>&#13;
# 前言&#13;
&#13;
&#13;
&gt;从今天开始就序列更新C++的文章了，希望大家可以耐心的坚持下去学习，有一个很好的成长~~&#13;
&#13;
&#13;
首先来看一下C++的介绍，百度百科C++ -- &gt;[点我跳转](https://baike.baidu.com/item/C++/99272)&#13;
&#13;
&#13;
&gt;C++是在C的基础之上，容纳进去了面向对象编程思想，并增加了许多有用的库，以及编程范式等。</description><guid isPermaLink="true">https://shilinnull.github.io/shilin.github.io/post/1.%20C%2B%2B-de-guan-jian-zi-%EF%BC%8C-ming-ming-kong-jian-%EF%BC%8C-que-sheng-can-shu-%EF%BC%8C-han-shu-zhong-zai-yi-ji-yuan-li.html</guid><pubDate>Sat, 29 Jun 2024 09:28:19 +0000</pubDate></item><item><title>记录我的搭建的第一篇博客</title><link>https://shilinnull.github.io/shilin.github.io/post/ji-lu-wo-de-da-jian-de-di-yi-pian-bo-ke.html</link><description>我的第一篇博客，发一些学习内容笔记~。</description><guid isPermaLink="true">https://shilinnull.github.io/shilin.github.io/post/ji-lu-wo-de-da-jian-de-di-yi-pian-bo-ke.html</guid><pubDate>Sat, 29 Jun 2024 04:33:28 +0000</pubDate></item></channel></rss>